uint2 gridCount;
float2 cellSize;
float timeStep;
float2 GetUV(uint3 id){
    return (id.xy+.5)/gridCount;
}
bool IsOnBoundary(uint3 id){
    return ((id.x==0 || id.x==gridCount.x-1) && 0<=id.y && id.y<gridCount.y)
         ||((id.y==0 || id.y==gridCount.y-1) && 0<=id.x && id.x<gridCount.x);
}
bool IsInBulk(uint3 id){
    return (0<id.x && id.x<gridCount.x-1 &&
            0<id.y && id.y<gridCount.y-1);
}
bool IsInBulkBoundary(uint3 id){
    return (0<=id.x && id.x<gridCount.x &&
            0<=id.y && id.y<gridCount.y);
}
uint2 GetBgId(uint3 id){
    return uint2(0,id.y);
}



Texture2D<TYPE> input_x,input_b;
RWTexture2D<TYPE> output_x;

Texture2D<float> input_scalar;
Texture2D<float2> input_vector;

Texture2D<float> input_scalar_1D;


#pragma kernel FillTextureFloat TYPE=float FillTexture=FillTextureFloat
float4 fill_value;
[numthreads(8,8,1)]
void FillTexture(uint3 id : SV_DispatchThreadID){
    if(IsInBulkBoundary(id)){
        output_x[id.xy]=fill_value;
    }
}

#pragma kernel JacobiIterationNeumannFloat TYPE=float NeumannBoundaryCondition JacobiIteration=JacobiIterationNeumannFloat
#pragma kernel JacobiIterationDirichletFloat2 TYPE=float2 DirichletBoundaryCondition JacobiIteration=JacobiIterationDirichletFloat2
// input_x, output_x, input_b
//(Σ+L)x=b
//x->b/Σ-L/Σ x
float jac_inv_diagCoeff;//1/Σ
float2 jac_neighborCoeff_mod;//-L/Σ

[numthreads(8,8,1)]
void JacobiIteration(uint3 id : SV_DispatchThreadID){
    if(IsInBulkBoundary(id)){
        if(IsInBulk(id)){
            TYPE b_c=input_b[id.xy];
            TYPE x_xm=input_x[id.xy+int2(-1,0)];
            TYPE x_xp=input_x[id.xy+int2(1,0)];
            TYPE x_yp=input_x[id.xy+int2(0,1)];
            TYPE x_ym=input_x[id.xy+int2(0,-1)];
            output_x[id.xy]=(x_xp+x_xm)*jac_neighborCoeff_mod.x
                            +(x_yp+x_ym)*jac_neighborCoeff_mod.y
                            +jac_inv_diagCoeff*b_c;
        }else{
            #ifdef NeumannBoundaryCondition
                if(id.x==0)
                    output_x[id.xy]=input_x[id.xy+uint2(1,0)];
                else if(id.x==gridCount.x-1)
                    output_x[id.xy]=input_x[id.xy-uint2(1,0)];
                else if(id.y==0)
                    output_x[id.xy]=input_x[id.xy+uint2(0,1)];
                else if(id.y==gridCount.y-1)
                    output_x[id.xy]=input_x[id.xy-uint2(0,1)];
            #elif DirichletBoundaryCondition
                output_x[id.xy]=input_x[id.xy];
            #endif
        }
    }
}

#pragma kernel AdvectionFloat TYPE=float Advection=AdvectionFloat
#pragma kernel AdvectionFloat2 TYPE=float2 Advection=AdvectionFloat2
#pragma kernel AdvectionFloat3 TYPE=float3 Advection=AdvectionFloat3
#pragma kernel AdvectionFloat4 TYPE=float4 Advection=AdvectionFloat4
// input_x, output_x, input_vector

SamplerState linear_clamp_sampler;
[numthreads(8,8,1)]
void Advection(uint3 id : SV_DispatchThreadID){
    if(IsInBulk(id)){
        float2 uv=GetUV(id);
        float2 bias=-input_vector[id.xy]*timeStep/(cellSize*gridCount);
        output_x[id.xy]=input_x.SampleLevel(linear_clamp_sampler,uv+bias,0);
    }
    else if(IsOnBoundary(id))
        output_x[id.xy]=input_x[id.xy];
}

#pragma kernel AdvectionRefine TYPE=float2 AdvectionRefine_
// MacCormack method
// Seems not make a difference
// input_x=n+1hat output_x=n output_x=n+1
#ifdef AdvectionRefine_
[numthreads(8,8,1)]
void AdvectionRefine(uint3 id : SV_DispatchThreadID){
    if(IsInBulkBoundary(id)){
        float2 velocity_ref;
        if(IsInBulk(id))
        {
            float2 uv=GetUV(id);
            float2 bias=input_x[id.xy]*timeStep/(cellSize*gridCount);//Here we reverse the advection
            velocity_ref=input_x.SampleLevel(linear_clamp_sampler,uv+bias,0);
        }else
            velocity_ref=input_x[id.xy];
        //here I used a slightly different method to save one copy of cache
        TYPE minVal=min(input_x[id.xy],output_x[id.xy]);
        TYPE maxVal=max(input_x[id.xy],output_x[id.xy]);
        output_x[id.xy]=input_x[id.xy]+.5*(output_x[id.xy]-velocity_ref);
        output_x[id.xy]=clamp(output_x[id.xy],minVal,maxVal);
        //TODO Add Limiter!
    }
}
#endif


//ω=▽×u
//u=u+eps dt dx normalize(▽|ω|)×ω

#pragma kernel Curl TYPE=float
// input_vector, output_x
[numthreads(8,8,1)]
void Curl(uint3 id:SV_DISPATCHTHREADID){
    if(IsInBulk(id)){
        float2 u_xm=input_vector[id.xy+int2(-1,0)];
        float2 u_xp=input_vector[id.xy+int2(1,0)];
        float2 u_yp=input_vector[id.xy+int2(0,1)];
        float2 u_ym=input_vector[id.xy+int2(0,-1)];
        output_x[id.xy]=(u_xp.y-u_xm.y)/(2*cellSize.x)-(u_yp.x-u_ym.x)/(2*cellSize.y);
    }
}
#pragma kernel AddVorticity TYPE=float2 AddVorticity_
// input_scalar, output_x
float vorticity_eps;
#ifdef AddVorticity_
[numthreads(8,8,1)]
void AddVorticity(uint3 id: SV_DISPATCHTHREADID){
    if(IsInBulk(id)){
        float w_c=input_scalar[id.xy];
        float w_xm=input_scalar[id.xy+int2(-1,0)];
        float w_xp=input_scalar[id.xy+int2(1,0)];
        float w_yp=input_scalar[id.xy+int2(0,1)];
        float w_ym=input_scalar[id.xy+int2(0,-1)];
        float2 grad=float2(w_xp-w_xm,w_yp-w_ym)/(2*cellSize);
        if(length(grad)>0)
            output_x[id.xy]=output_x[id.xy]
                    +vorticity_eps*cellSize  //no Δt
                    *normalize(float2(-grad.y,grad.x))*w_c;
    }
    else if(IsOnBoundary(id))
        output_x[id.xy]=output_x[id.xy];
}
#endif



//▽@▽p=ρ(▽@w)/dt
//u=w-(▽p)/ρ*dt
#pragma kernel DivergenceMod TYPE=float
// input_vector, input_scalar_1D, output_x
[numthreads(8,8,1)]
void DivergenceMod(uint3 id: SV_DISPATCHTHREADID){
    if(IsInBulk(id)){
        uint3 id1;
        id1=id+uint3(-1,0,0);
        float2 w_xm=input_vector[id1.xy]*input_scalar_1D[GetBgId(id1)];
        id1=id+uint3(1,0,0);                                 
        float2 w_xp=input_vector[id1.xy]*input_scalar_1D[GetBgId(id1)];
        id1=id+uint3(0,1,0);                                 
        float2 w_yp=input_vector[id1.xy]*input_scalar_1D[GetBgId(id1)];
        id1=id+uint3(0,-1,0);                                
        float2 w_ym=input_vector[id1.xy]*input_scalar_1D[GetBgId(id1)];
        float divergence=(w_xp.x-w_xm.x)/(2*cellSize.x)+(w_yp.y-w_ym.y)/(2*cellSize.y);
        output_x[id.xy]=divergence/timeStep;
    }
}
#pragma kernel MinusGradientMod TYPE=float2 MinusGradientMod_
// input_scalar, input_scalar_1D, output_x
#ifdef MinusGradientMod_
[numthreads(8,8,1)]
void MinusGradientMod(uint3 id: SV_DISPATCHTHREADID){
    if(IsInBulk(id)){
        float p_xm=input_scalar[id.xy+int2(-1,0)];
        float p_xp=input_scalar[id.xy+int2(1,0)];
        float p_yp=input_scalar[id.xy+int2(0,1)];
        float p_ym=input_scalar[id.xy+int2(0,-1)];
        float2 grad=float2(p_xp-p_xm,p_yp-p_ym)/(2*cellSize);
        float rhbar=input_scalar_1D[GetBgId(id)];
        output_x[id.xy]=output_x[id.xy]-grad/rhbar*timeStep;
    }
    else if(IsOnBoundary(id))
        output_x[id.xy]=output_x[id.xy];
}
#endif



RWTexture2D<float> bgMassDensity;
RWTexture2D<float> bgPressure;
RWTexture2D<float> bgTemperature;
RWTexture2D<float2> velocity;
RWTexture2D<float> potentialTemperature;
RWTexture2D<float> vaporRatio;
RWTexture2D<float> cloudRatio;
RWTexture2D<float> rainRatio;
float heatCapacityKappa;//0.286
float referencePressure;//100000 Pa
float waterMolarMass;//28.96e-3 kg/mol
float airMolarMass;//18.02e-3 kg/mol
float vaporGamma;//1.33
float airGamma;//1.4
float gasConstantR;//8.314 J/(mol K)
float vaporLatentHeatPerMass;//2.5J/kg
float gravityStrength;//+9.8 m/s^2


float getPotentialTemperature(float T, float pbar){
    return T*pow(abs(referencePressure/pbar),heatCapacityKappa);
}
float getAbsoluteTemperature(float th, float pbar){
    return th*pow(abs(pbar/referencePressure),heatCapacityKappa);
}

float getSaturationMixingRatio(float TKelvin, float pPascal){
    float TCelsius=TKelvin-273.15;
    return 380.16/pPascal*exp(17.67*TCelsius/(TCelsius+243.50));
}
float getMoleFraction(float q){
    return q/(1+q);
}
float getMixedHeatCapacityPerMass(float qv){
    float Xv=getMoleFraction(qv);
    float Mth=lerp(airMolarMass,waterMolarMass, Xv);
    float gammath=lerp(airGamma,vaporGamma,Xv);  //TODO use molar ratio or mass ratio?
    float cpth=gammath/(gammath-1)*gasConstantR/Mth;
    return cpth;
}
float getBuoyancyAcceleration(float T,float Tbar,float qv){
    float Xv=getMoleFraction(qv);
    float Mth=lerp(airMolarMass,waterMolarMass, Xv);
    return gravityStrength*(T/Tbar*airMolarMass/Mth-1);
}
#pragma kernel ApplyForce TYPE=float2 ApplyForce_
// input_x output_x potentialTemperature bgPressure bgTemperature vaporRatio
#ifdef ApplyForce_
[numthreads(8,8,1)]
void ApplyForce(uint3 id:SV_DISPATCHTHREADID){
    if(IsInBulk(id)){
        float Tbar=bgTemperature[GetBgId(id)];
        float pbar=bgPressure[GetBgId(id)];
        float thbar=getPotentialTemperature(Tbar,pbar);
        
        //float2 uv=GetUV(id);
        //float2 uv1=(uv-.5);
        //float radius=.2;
        //if(length(uv1)<radius){
        //    float th1=thbar*.97;
        //    potentialTemperature[id.xy]=lerp(potentialTemperature[id.xy],th1,saturate(1-length(uv1)/radius));
        //    //output_x[id.xy]=input_x[id.xy]+float2(0,.1)*timeStep;
        //}

        float th=potentialTemperature[id.xy];
        float T=getAbsoluteTemperature(th,pbar);
        float qv=vaporRatio[id.xy];
        qv=0;
        float B=getBuoyancyAcceleration(T,Tbar,qv);
        //if(0.25*gridCount.x<=id.x && id.x<.75*gridCount.x)B=1;else B=0;
        output_x[id.xy]=input_x[id.xy]+float2(0,B)*timeStep;
    }
}
#endif


#pragma kernel UpdateCondensation TYPE=float2
//vaporRatio cloudRatio rainRatio potentialTemperature bgPressure
[numthreads(8,8,1)]
void UpdateCondensation(uint3 id: SV_DISPATCHTHREADID){
    if(IsInBulk(id)){//TODO do not update boundary?
        return;
        float qv=vaporRatio[id.xy];
        float qc=cloudRatio[id.xy];
        float qr=rainRatio[id.xy];
        float th=potentialTemperature[id.xy];
        float pbar=bgPressure[GetBgId(id)];
        float T=getAbsoluteTemperature(th,pbar);
        float qvs=getSaturationMixingRatio(T,pbar);
        float Er=0;
        float Ac=0;
        float Kc=0;
        float Ec=min(qvs-qv,qc);
        qv=qv+Ec+Er;
        qc=qc-Ec-Ac-Kc;
        qr=qr+Ac+Kc-Er;
        float cpth=getMixedHeatCapacityPerMass(qv);
        //th=th-vaporLatentHeatPerMass/cpth*-Er; //TODO check this equation its weird

        vaporRatio[id.xy]=qv;
        cloudRatio[id.xy]=qc;
        rainRatio[id.xy]=qr;
        potentialTemperature[id.xy]=th;
    }
}

//RWTexture1D<float> bgMassDensity;
//RWTexture1D<float> bgPressure;
//RWTexture1D<float> bgTemperature;
//RWTexture2D<float2> velocity;
//RWTexture2D<float> potentialTemperature;
//RWTexture2D<float> vaporRatio;
//RWTexture2D<float> cloudRatio;
//RWTexture2D<float> rainRatio;
float bgSealevelTemperature;//288.15K
float bgTemperatureGradient;//-0.0065K/m
float bgSealevelPressure;//101325Pa
float bgPressureExponent;//5.2561




#pragma kernel SetInitialValues TYPE=float
[numthreads(8,8,1)]
void SetInitialValues(uint3 id: SV_DISPATCHTHREADID){
    if(IsInBulkBoundary(id)){
        float height=(id.y-.5)*cellSize.y;
        float Tbar=bgSealevelTemperature+height*bgTemperatureGradient;
        float pbar=bgSealevelPressure*pow(abs(Tbar/bgSealevelTemperature),bgPressureExponent);
        float rhbar=pbar/(gasConstantR*Tbar)*airMolarMass;
        if(id.x==0){
            bgMassDensity[GetBgId(id)]=rhbar;
            bgPressure[GetBgId(id)]=pbar;
            bgTemperature[GetBgId(id)]=Tbar;
        }
        if(0.25*gridCount.x<=id.x && id.x<.75*gridCount.x)
            Tbar*=1.03;
        potentialTemperature[id.xy]=getPotentialTemperature(Tbar,pbar);
        float2 uv=GetUV(id);
        float2 uv1=(uv-.5)*2;
        velocity[id.xy]=0;//float2(uv1.y,-uv1.x);
        vaporRatio[id.xy]=0;
        cloudRatio[id.xy]=0;
        rainRatio[id.xy]=0;
    }
}